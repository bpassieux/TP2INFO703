/* The following code was generated by JFlex 1.6.1 */

/* --------------------------Section de Code Utilisateur---------------------*/
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>G:/Admin/Documents/COMPILATION/I703_TP2_Lambada/src/main/jflex/AnalyseurLexical.flex</tt>
 */
class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\47\1\47\1\47\1\47\22\0\1\2\4\0\1\3"+
    "\2\0\1\53\1\54\1\50\1\55\1\0\1\56\1\60\1\46\12\1"+
    "\1\0\1\57\1\52\1\51\3\0\1\41\2\44\1\11\1\16\1\27"+
    "\1\44\1\24\1\25\2\44\1\15\1\7\1\31\1\10\1\36\1\44"+
    "\1\43\1\33\1\17\1\37\1\44\1\23\3\44\4\0\1\45\1\0"+
    "\1\40\2\44\1\6\1\13\1\26\1\44\1\21\1\22\2\44\1\12"+
    "\1\4\1\30\1\5\1\34\1\44\1\42\1\32\1\14\1\35\1\44"+
    "\1\20\3\44\12\0\1\47\32\0\1\2\11\0\1\44\12\0\1\44"+
    "\4\0\1\44\5\0\27\44\1\0\37\44\1\0\u01ca\44\4\0\14\44"+
    "\16\0\5\44\7\0\1\44\1\0\1\44\21\0\160\45\5\44\1\0"+
    "\2\44\2\0\4\44\1\0\1\44\6\0\1\44\1\0\3\44\1\0"+
    "\1\44\1\0\24\44\1\0\123\44\1\0\213\44\1\0\7\45\246\44"+
    "\1\0\46\44\2\0\1\44\7\0\47\44\11\0\55\45\1\0\1\45"+
    "\1\0\2\45\1\0\2\45\1\0\1\45\10\0\33\44\5\0\3\44"+
    "\35\0\13\45\5\0\53\44\37\45\4\0\2\44\1\45\143\44\1\0"+
    "\1\44\7\45\2\0\6\45\2\44\2\45\1\0\4\45\2\44\12\45"+
    "\3\44\2\0\1\44\20\0\1\44\1\45\36\44\33\45\2\0\131\44"+
    "\13\45\1\44\16\0\12\45\41\44\11\45\2\44\4\0\1\44\5\0"+
    "\26\44\4\45\1\44\11\45\1\44\3\45\1\44\5\45\22\0\31\44"+
    "\3\45\104\0\23\44\61\0\40\45\66\44\3\45\1\44\22\45\1\44"+
    "\7\45\12\44\2\45\2\0\12\45\1\0\20\44\3\45\1\0\10\44"+
    "\2\0\2\44\2\0\26\44\1\0\7\44\1\0\1\44\3\0\4\44"+
    "\2\0\1\45\1\44\7\45\2\0\2\45\2\0\3\45\1\44\10\0"+
    "\1\45\4\0\2\44\1\0\3\44\2\45\2\0\12\45\2\44\17\0"+
    "\3\45\1\0\6\44\4\0\2\44\2\0\26\44\1\0\7\44\1\0"+
    "\2\44\1\0\2\44\1\0\2\44\2\0\1\45\1\0\5\45\4\0"+
    "\2\45\2\0\3\45\3\0\1\45\7\0\4\44\1\0\1\44\7\0"+
    "\14\45\3\44\1\45\13\0\3\45\1\0\11\44\1\0\3\44\1\0"+
    "\26\44\1\0\7\44\1\0\2\44\1\0\5\44\2\0\1\45\1\44"+
    "\10\45\1\0\3\45\1\0\3\45\2\0\1\44\17\0\2\44\2\45"+
    "\2\0\12\45\21\0\3\45\1\0\10\44\2\0\2\44\2\0\26\44"+
    "\1\0\7\44\1\0\2\44\1\0\5\44\2\0\1\45\1\44\7\45"+
    "\2\0\2\45\2\0\3\45\10\0\2\45\4\0\2\44\1\0\3\44"+
    "\2\45\2\0\12\45\1\0\1\44\20\0\1\45\1\44\1\0\6\44"+
    "\3\0\3\44\1\0\4\44\3\0\2\44\1\0\1\44\1\0\2\44"+
    "\3\0\2\44\3\0\3\44\3\0\14\44\4\0\5\45\3\0\3\45"+
    "\1\0\4\45\2\0\1\44\6\0\1\45\16\0\12\45\20\0\4\45"+
    "\1\0\10\44\1\0\3\44\1\0\27\44\1\0\20\44\3\0\1\44"+
    "\7\45\1\0\3\45\1\0\4\45\7\0\2\45\1\0\2\44\6\0"+
    "\2\44\2\45\2\0\12\45\21\0\3\45\1\0\10\44\1\0\3\44"+
    "\1\0\27\44\1\0\12\44\1\0\5\44\2\0\1\45\1\44\7\45"+
    "\1\0\3\45\1\0\4\45\7\0\2\45\7\0\1\44\1\0\2\44"+
    "\2\45\2\0\12\45\1\0\2\44\16\0\3\45\1\0\10\44\1\0"+
    "\3\44\1\0\51\44\2\0\1\44\7\45\1\0\3\45\1\0\4\45"+
    "\1\44\10\0\1\45\10\0\2\44\2\45\2\0\12\45\12\0\6\44"+
    "\2\0\2\45\1\0\22\44\3\0\30\44\1\0\11\44\1\0\1\44"+
    "\2\0\7\44\3\0\1\45\4\0\6\45\1\0\1\45\1\0\10\45"+
    "\6\0\12\45\2\0\2\45\15\0\60\44\1\45\2\44\7\45\5\0"+
    "\7\44\10\45\1\0\12\45\47\0\2\44\1\0\1\44\2\0\2\44"+
    "\1\0\1\44\2\0\1\44\6\0\4\44\1\0\7\44\1\0\3\44"+
    "\1\0\1\44\1\0\1\44\2\0\2\44\1\0\4\44\1\45\2\44"+
    "\6\45\1\0\2\45\1\44\2\0\5\44\1\0\1\44\1\0\6\45"+
    "\2\0\12\45\2\0\4\44\40\0\1\44\27\0\2\45\6\0\12\45"+
    "\13\0\1\45\1\0\1\45\1\0\1\45\4\0\2\45\10\44\1\0"+
    "\44\44\4\0\24\45\1\0\2\45\5\44\13\45\1\0\44\45\11\0"+
    "\1\45\71\0\53\44\24\45\1\44\12\45\6\0\6\44\4\45\4\44"+
    "\3\45\1\44\3\45\2\44\7\45\3\44\4\45\15\44\14\45\1\44"+
    "\17\45\2\0\46\44\1\0\1\44\5\0\1\44\2\0\53\44\1\0"+
    "\u014d\44\1\0\4\44\2\0\7\44\1\0\1\44\1\0\4\44\2\0"+
    "\51\44\1\0\4\44\2\0\41\44\1\0\4\44\2\0\7\44\1\0"+
    "\1\44\1\0\4\44\2\0\17\44\1\0\71\44\1\0\4\44\2\0"+
    "\103\44\2\0\3\45\40\0\20\44\20\0\125\44\14\0\u026c\44\2\0"+
    "\21\44\1\2\32\44\5\0\113\44\3\0\3\45\10\44\7\0\15\44"+
    "\1\0\4\44\3\45\13\0\22\44\3\45\13\0\22\44\2\45\14\0"+
    "\15\44\1\0\3\44\1\0\2\45\14\0\64\44\40\45\3\0\1\44"+
    "\4\0\1\44\1\45\2\0\12\45\41\0\3\45\2\0\12\45\6\0"+
    "\130\44\10\0\51\44\1\45\1\44\5\0\106\44\12\0\37\44\1\0"+
    "\14\45\4\0\14\45\12\0\12\45\36\44\2\0\5\44\13\0\54\44"+
    "\4\0\21\45\7\44\2\45\6\0\12\45\46\0\27\44\5\45\4\0"+
    "\65\44\12\45\1\0\35\45\2\0\13\45\6\0\12\45\15\0\1\44"+
    "\10\0\17\45\101\0\5\45\57\44\21\45\7\44\4\0\12\45\21\0"+
    "\11\45\14\0\3\45\36\44\15\45\2\44\12\45\54\44\16\45\14\0"+
    "\44\44\24\45\10\0\12\45\3\0\3\44\12\45\44\44\122\0\3\45"+
    "\1\0\25\45\4\44\1\45\4\44\3\45\2\44\1\0\2\45\6\0"+
    "\300\44\66\45\6\0\4\45\u0116\44\2\0\6\44\2\0\46\44\2\0"+
    "\6\44\2\0\10\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\37\44\2\0\65\44\1\0\7\44\1\0\1\44\3\0\3\44\1\0"+
    "\7\44\3\0\4\44\2\0\6\44\4\0\15\44\5\0\3\44\1\0"+
    "\7\44\3\0\13\2\35\0\1\47\1\47\5\0\1\2\17\0\2\45"+
    "\23\0\1\45\12\0\1\2\21\0\1\44\15\0\1\44\20\0\15\44"+
    "\63\0\41\45\21\0\1\44\4\0\1\44\2\0\12\44\1\0\1\44"+
    "\3\0\5\44\6\0\1\44\1\0\1\44\1\0\1\44\1\0\4\44"+
    "\1\0\13\44\2\0\4\44\5\0\5\44\4\0\1\44\21\0\43\45"+
    "\2\44\4\45\u032d\0\64\45\u0716\0\57\44\1\0\57\44\1\0\205\44"+
    "\6\0\4\44\3\45\2\44\14\0\46\44\1\0\1\44\5\0\1\44"+
    "\2\0\70\44\7\0\1\44\17\0\1\45\27\44\11\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\40\45\57\0\1\44\u01d0\0\1\2\4\0"+
    "\2\44\1\45\31\0\17\45\1\0\5\44\2\0\3\45\2\44\4\0"+
    "\126\44\2\0\2\45\2\0\3\44\1\0\132\44\1\0\4\44\5\0"+
    "\51\44\3\0\136\44\21\0\33\44\65\0\20\44\u0200\0\u19b6\44\112\0"+
    "\u51cd\44\63\0\u048d\44\103\0\56\44\2\0\u010d\44\3\0\20\44\12\45"+
    "\2\44\24\0\57\44\4\45\1\0\12\45\1\0\37\44\1\0\1\45"+
    "\106\44\14\45\45\0\11\44\2\0\147\44\2\0\4\44\1\0\36\44"+
    "\2\0\2\44\105\0\13\44\1\45\3\44\1\45\4\44\1\45\27\44"+
    "\5\45\30\0\64\44\14\0\2\45\62\44\21\45\13\0\12\45\6\0"+
    "\22\45\6\44\3\0\1\44\4\0\12\45\34\44\10\45\2\0\27\44"+
    "\15\45\14\0\35\44\3\0\4\45\57\44\16\45\16\0\1\44\12\45"+
    "\6\0\5\44\1\45\12\44\12\45\5\44\1\0\51\44\16\45\11\0"+
    "\3\44\1\45\10\44\2\45\2\0\12\45\6\0\27\44\3\0\1\44"+
    "\3\45\62\44\1\45\1\44\3\45\2\44\2\45\5\44\2\45\1\44"+
    "\1\45\1\44\30\0\3\44\2\0\13\44\5\45\2\0\3\44\2\45"+
    "\12\0\6\44\2\0\6\44\2\0\6\44\11\0\7\44\1\0\7\44"+
    "\1\0\53\44\1\0\4\44\4\0\2\44\132\0\43\44\10\45\1\0"+
    "\2\45\2\0\12\45\6\0\u2ba4\44\14\0\27\44\4\0\61\44\u2104\0"+
    "\u016e\44\2\0\152\44\46\0\7\44\14\0\5\44\5\0\1\44\1\45"+
    "\12\44\1\0\15\44\1\0\5\44\1\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\0\154\44\41\0\u016b\44\22\0\100\44\2\0\66\44\50\0"+
    "\14\44\4\0\20\45\20\0\16\45\5\0\2\45\30\0\3\45\40\0"+
    "\5\44\1\0\207\44\23\0\12\45\7\0\32\44\4\0\1\45\1\0"+
    "\32\44\13\0\131\44\3\0\6\44\2\0\6\44\2\0\6\44\2\0"+
    "\3\44\43\0\14\44\1\0\32\44\1\0\23\44\1\0\2\44\1\0"+
    "\17\44\2\0\16\44\42\0\173\44\105\0\65\45\210\0\1\45\202\0"+
    "\35\44\3\0\61\44\17\0\1\45\37\0\40\44\20\0\21\44\1\45"+
    "\10\44\1\45\5\0\46\44\5\45\5\0\36\44\2\0\44\44\4\0"+
    "\10\44\1\0\5\45\52\0\236\44\2\0\12\45\126\0\50\44\10\0"+
    "\64\44\234\0\u0137\44\11\0\26\44\12\0\10\44\230\0\6\44\2\0"+
    "\1\44\1\0\54\44\1\0\2\44\3\0\1\44\2\0\27\44\12\0"+
    "\27\44\11\0\37\44\141\0\26\44\12\0\32\44\106\0\70\44\6\0"+
    "\2\44\100\0\1\44\3\45\1\0\2\45\5\0\4\45\4\44\1\0"+
    "\3\44\1\0\33\44\4\0\3\45\4\0\1\45\40\0\35\44\3\0"+
    "\35\44\43\0\10\44\1\0\34\44\2\45\31\0\66\44\12\0\26\44"+
    "\12\0\23\44\15\0\22\44\156\0\111\44\u03b7\0\3\45\65\44\17\45"+
    "\37\0\12\45\17\0\4\45\55\44\13\45\25\0\31\44\7\0\12\45"+
    "\6\0\3\45\44\44\16\45\1\0\12\45\20\0\43\44\1\45\2\0"+
    "\1\44\11\0\3\45\60\44\16\45\4\44\13\0\12\45\1\44\45\0"+
    "\22\44\1\0\31\44\14\45\170\0\57\44\14\45\5\0\12\45\7\0"+
    "\3\45\1\0\10\44\2\0\2\44\2\0\26\44\1\0\7\44\1\0"+
    "\2\44\1\0\5\44\2\0\1\45\1\44\7\45\2\0\2\45\2\0"+
    "\3\45\11\0\1\45\5\0\5\44\2\45\2\0\7\45\3\0\5\45"+
    "\u010b\0\60\44\24\45\2\44\1\0\1\44\10\0\12\45\246\0\57\44"+
    "\7\45\2\0\11\45\77\0\60\44\21\45\3\0\1\44\13\0\12\45"+
    "\46\0\53\44\15\45\10\0\12\45\u01d6\0\100\44\12\45\25\0\1\44"+
    "\u01c0\0\71\44\u0507\0\u0399\44\147\0\157\45\u0b91\0\u042f\44\u33d1\0\u0239\44"+
    "\7\0\37\44\1\0\12\45\146\0\36\44\2\0\5\45\13\0\60\44"+
    "\7\45\11\0\4\44\14\0\12\45\11\0\25\44\5\0\23\44\u0370\0"+
    "\105\44\13\0\1\44\56\45\20\0\4\45\15\44\u4060\0\2\44\u0bfe\0"+
    "\153\44\5\0\15\44\3\0\11\44\7\0\12\44\3\0\2\45\u14c6\0"+
    "\5\45\3\0\6\45\10\0\10\45\2\0\7\45\36\0\4\45\224\0"+
    "\3\45\u01bb\0\125\44\1\0\107\44\1\0\2\44\2\0\1\44\2\0"+
    "\2\44\2\0\4\44\1\0\14\44\1\0\1\44\1\0\7\44\1\0"+
    "\101\44\1\0\4\44\2\0\10\44\1\0\7\44\1\0\34\44\1\0"+
    "\4\44\1\0\5\44\1\0\1\44\3\0\7\44\1\0\u0154\44\2\0"+
    "\31\44\1\0\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0\31\44\1\0"+
    "\10\44\2\0\62\45\u1000\0\305\44\13\0\7\45\u0529\0\4\44\1\0"+
    "\33\44\1\0\2\44\1\0\1\44\2\0\1\44\1\0\12\44\1\0"+
    "\4\44\1\0\1\44\1\0\1\44\6\0\1\44\4\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\3\44\1\0\2\44\1\0\1\44\2\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\2\44\1\0\1\44\2\0\4\44\1\0\7\44\1\0\4\44\1\0"+
    "\4\44\1\0\1\44\1\0\12\44\1\0\21\44\5\0\3\44\1\0"+
    "\5\44\1\0\21\44\u0274\0\32\45\6\0\32\45\6\0\32\45\u0e76\0"+
    "\ua6d7\44\51\0\u1035\44\13\0\336\44\u3fe2\0\u021e\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\45\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\25\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\5\1\20\1\21\11\5\1\22\11\5\1\23\1\0"+
    "\1\24\1\4\2\5\1\25\10\5\1\26\1\27\1\30"+
    "\1\0\2\5\1\31\1\32\4\5\1\23\2\5\1\33"+
    "\1\34\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\61\0\223\0\304\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\61\0\61\0\u04c9\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\u04fa\0\u052b\0\u0310\0\u0310"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0310\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\61\0\u0310\0\u0930"+
    "\0\u0961\0\u0310\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0310\0\u0310\0\u0310\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0310\0\u0310\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\61\0\u0c71"+
    "\0\u0ca2\0\u0310\0\u0310\0\u0310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\23\1\26\2\23\1\27"+
    "\1\30\6\23\1\31\1\32\3\23\1\2\1\33\1\4"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\62\0\1\3\60\0\1\23\2\0\1\23\1\45"+
    "\40\23\14\0\1\23\2\0\31\23\1\46\4\23\1\47"+
    "\3\23\14\0\1\23\2\0\1\23\1\50\40\23\14\0"+
    "\1\23\2\0\4\23\1\51\35\23\14\0\1\23\2\0"+
    "\33\23\1\52\3\23\1\47\2\23\14\0\1\23\2\0"+
    "\4\23\1\50\35\23\14\0\1\23\2\0\7\23\1\53"+
    "\32\23\14\0\1\23\2\0\6\23\1\54\33\23\14\0"+
    "\1\23\2\0\15\23\1\55\24\23\14\0\1\23\2\0"+
    "\12\23\1\56\27\23\14\0\1\23\2\0\11\23\1\57"+
    "\30\23\14\0\1\23\2\0\20\23\1\60\21\23\14\0"+
    "\1\23\2\0\15\23\1\61\24\23\14\0\1\23\2\0"+
    "\42\23\14\0\1\23\2\0\22\23\1\62\1\23\1\63"+
    "\15\23\14\0\1\23\2\0\20\23\1\64\21\23\14\0"+
    "\1\23\2\0\23\23\1\62\1\23\1\65\14\23\14\0"+
    "\1\23\2\0\1\23\1\66\14\23\1\67\23\23\14\0"+
    "\1\23\2\0\4\23\1\70\14\23\1\71\20\23\14\0"+
    "\1\23\2\0\24\23\1\72\15\23\14\0\1\23\2\0"+
    "\25\23\1\73\14\23\61\0\1\74\1\0\1\75\61\0"+
    "\1\76\10\0\1\23\2\0\2\23\1\77\37\23\14\0"+
    "\1\23\2\0\10\23\1\100\31\23\14\0\1\23\2\0"+
    "\5\23\1\77\34\23\14\0\1\23\2\0\13\23\1\101"+
    "\26\23\14\0\1\23\2\0\10\23\1\102\31\23\14\0"+
    "\1\23\2\0\26\23\1\103\13\23\14\0\1\23\2\0"+
    "\7\23\1\104\32\23\14\0\1\23\2\0\13\23\1\102"+
    "\26\23\14\0\1\23\2\0\27\23\1\105\12\23\14\0"+
    "\1\23\2\0\12\23\1\106\27\23\14\0\1\23\2\0"+
    "\16\23\1\107\23\23\14\0\1\23\2\0\30\23\1\110"+
    "\11\23\14\0\1\23\2\0\21\23\1\111\20\23\14\0"+
    "\1\23\2\0\32\23\1\112\7\23\14\0\1\23\2\0"+
    "\10\23\1\113\31\23\14\0\1\23\2\0\6\23\1\114"+
    "\33\23\14\0\1\23\2\0\13\23\1\113\26\23\14\0"+
    "\1\23\2\0\11\23\1\114\30\23\14\0\1\23\2\0"+
    "\2\23\1\115\37\23\14\0\1\23\2\0\5\23\1\115"+
    "\34\23\13\0\47\74\1\0\11\74\50\75\1\116\10\75"+
    "\1\0\1\23\2\0\30\23\1\117\11\23\14\0\1\23"+
    "\2\0\32\23\1\120\7\23\14\0\1\23\2\0\7\23"+
    "\1\121\32\23\14\0\1\23\2\0\24\23\1\122\15\23"+
    "\14\0\1\23\2\0\12\23\1\121\27\23\14\0\1\23"+
    "\2\0\25\23\1\122\14\23\14\0\1\23\2\0\6\23"+
    "\1\123\33\23\14\0\1\23\2\0\31\23\1\124\10\23"+
    "\14\0\1\23\2\0\11\23\1\125\30\23\14\0\1\23"+
    "\2\0\33\23\1\126\6\23\13\0\46\75\1\127\1\75"+
    "\1\116\10\75\1\0\1\23\2\0\31\23\1\130\10\23"+
    "\14\0\1\23\2\0\33\23\1\131\6\23\14\0\1\23"+
    "\2\0\7\23\1\132\32\23\14\0\1\23\2\0\10\23"+
    "\1\133\31\23\14\0\1\23\2\0\12\23\1\132\27\23"+
    "\14\0\1\23\2\0\13\23\1\133\26\23\14\0\1\23"+
    "\2\0\10\23\1\134\31\23\14\0\1\23\2\0\13\23"+
    "\1\134\26\23\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3283];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\26\1\2\11\1\1\6\11"+
    "\30\1\1\0\1\11\17\1\1\0\10\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR, yyline, yycolumn) ;
            }
          case 30: break;
          case 2: 
            { return new Symbol(sym.ENTIER, yyline, yycolumn, new Integer(yytext())) ;
            }
          case 31: break;
          case 3: 
            { /*espace : pas d'action*/
            }
          case 32: break;
          case 4: 
            { return new Symbol(sym.MOD, yyline, yycolumn) ;
            }
          case 33: break;
          case 5: 
            { return new Symbol(sym.IDENT, yyline, yycolumn, yytext()) ;
            }
          case 34: break;
          case 6: 
            { return new Symbol(sym.DIV, yyline, yycolumn) ;
            }
          case 35: break;
          case 7: 
            { return new Symbol(sym.MUL, yyline, yycolumn) ;
            }
          case 36: break;
          case 8: 
            { return new Symbol(sym.EGAL, yyline, yycolumn) ;
            }
          case 37: break;
          case 9: 
            { return new Symbol(sym.GT, yyline, yycolumn) ;
            }
          case 38: break;
          case 10: 
            { return new Symbol(sym.PAR_G, yyline, yycolumn) ;
            }
          case 39: break;
          case 11: 
            { return new Symbol(sym.PAR_D, yyline, yycolumn) ;
            }
          case 40: break;
          case 12: 
            { return new Symbol(sym.PLUS, yyline, yycolumn) ;
            }
          case 41: break;
          case 13: 
            { return new Symbol(sym.MOINS, yyline, yycolumn) ;
            }
          case 42: break;
          case 14: 
            { return new Symbol(sym.SEMI, yyline, yycolumn) ;
            }
          case 43: break;
          case 15: 
            { return new Symbol(sym.POINT, yyline, yycolumn) ;
            }
          case 44: break;
          case 16: 
            { return new Symbol(sym.OR, yyline, yycolumn) ;
            }
          case 45: break;
          case 17: 
            { return new Symbol(sym.DO, yyline, yycolumn) ;
            }
          case 46: break;
          case 18: 
            { return new Symbol(sym.IF, yyline, yycolumn) ;
            }
          case 47: break;
          case 19: 
            { /*commentaire : pas d'action*/
            }
          case 48: break;
          case 20: 
            { return new Symbol(sym.GTE, yyline, yycolumn) ;
            }
          case 49: break;
          case 21: 
            { return new Symbol(sym.LET, yyline, yycolumn) ;
            }
          case 50: break;
          case 22: 
            { return new Symbol(sym.NOT, yyline, yycolumn) ;
            }
          case 51: break;
          case 23: 
            { return new Symbol(sym.NIL, yyline, yycolumn) ;
            }
          case 52: break;
          case 24: 
            { return new Symbol(sym.AND, yyline, yycolumn) ;
            }
          case 53: break;
          case 25: 
            { return new Symbol(sym.ELSE, yyline, yycolumn) ;
            }
          case 54: break;
          case 26: 
            { return new Symbol(sym.THEN, yyline, yycolumn) ;
            }
          case 55: break;
          case 27: 
            { return new Symbol(sym.WHILE, yyline, yycolumn) ;
            }
          case 56: break;
          case 28: 
            { return new Symbol(sym.INPUT, yyline, yycolumn) ;
            }
          case 57: break;
          case 29: 
            { return new Symbol(sym.OUTPUT, yyline, yycolumn) ;
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
